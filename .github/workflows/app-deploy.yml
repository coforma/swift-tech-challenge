name: "Application Deploy"
on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      environment:
        type: string
        required: false
        default: ''
      wait_enabled:
        type: boolean
        default: true
    secrets:
      DEPLOY_ROLE:
        required: true
  workflow_dispatch:
    inputs:
      target:
        required: true
        type: choice
        options:
          - test
          - stage
          - prod
      environment:
        required: false
        default: ''
      wait_enabled:
        type: boolean
        default: true

jobs:
  frontend-deploy:
    name: "Frontend Deploy"
    runs-on: ubuntu-latest
    ## To allow for multiple targets in the same environment, default environment to target, but let environment be optionally declared
    environment: ${{ inputs.environment != '' && inputs.environment || inputs.target }}
    permissions:
      id-token: write
      contents: read
    env:
      LAMBDA_NAME: ${{ inputs.target}}-frontend
      LAMBDA_ALIAS: ${{ inputs.target}}-app-latest
      ARTIFACT_BUCKET: ${{ vars.artifact_bucket }}
      PUBLIC_BUCKET: ${{ vars.public_bucket }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEPLOY_ROLE }}
          aws-region: us-east-1
          role-session-name: GitHubAppDeploy
      - name: Update Frontend Lambda Code
        run: |
          ## Update the code from s3
          aws lambda update-function-code \
          --function-name  $LAMBDA_NAME \
          --s3-bucket $ARTIFACT_BUCKET --s3-key $GITHUB_REF_NAME/frontend.zip | tee update.json
          ## Wait for function to complete update
          aws lambda wait function-updated-v2 --function-name $LAMBDA_NAME
          LAMBDA_CODE_SHA=$(cat update.json | jq -r .CodeSha256 )
          ## Publish new version
          aws lambda publish-version --function-name  $LAMBDA_NAME --code-sha256 $LAMBDA_CODE_SHA | tee publish.json
          LAMBDA_VERSION=$(cat publish.json | jq -r .Version)
          ## Wait for new version to become availabled
          aws lambda wait published-version-active --function-name $LAMBDA_NAME --qualifier $LAMBDA_VERSION
          aws lambda update-alias --function-name $LAMBDA_NAME --name $LAMBDA_ALIAS --function-version $LAMBDA_VERSION
          aws lambda wait published-version-active --function-name ${LAMBDA_NAME}:${LAMBDA_ALIAS}
      ## AWS Lambda can take a while to change traffic from old verison to new. This optional step will check if other
      ## versions are running and wait if they are. When Additonal versions returns null, process ends
      - name: Wait for lambda alias to update
        if: inputs.wait_enabled == 'true' || inputs.wait_enabled == true
        timeout-minutes: 5
        run: |
          weight="not_null"
          printf "Waiting on Lambda Alias to update."
          while [ "$weight" != "null" ];
          do
            sleep 5
            weight=$(aws lambda get-alias --function-name $LAMBDA_NAME --name $LAMBDA_ALIAS | jq -r ".RoutingConfig.AdditionalVersionWeights" )
            printf "."
          done
      - name: Upload Static Assets
        run: |
          aws s3 cp s3://${ARTIFACT_BUCKET}/${GITHUB_REF_NAME}/static.zip ./static.zip
          mkdir -p static
          unzip ./static.zip -d ./static/
          aws s3 cp ./static s3://${PUBLIC_BUCKET}/_next/ --recursive
